#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

// PIDÊñá‰ª∂Ë∑ØÂæÑ
const PID_FILE = path.join(__dirname, '.server.pid');
const LOCK_FILE = path.join(__dirname, '.server.lock');

// Ê£ÄÊü•ËøõÁ®ãÊòØÂê¶‰ªçÂú®ËøêË°å
function isProcessRunning(pid) {
    try {
        process.kill(pid, 0);
        return true;
    } catch (error) {
        return false;
    }
}

// Ê∏ÖÁêÜÊñá‰ª∂
function cleanup() {
    try {
        if (fs.existsSync(PID_FILE)) {
            fs.unlinkSync(PID_FILE);
            console.log('üßπ Removed PID file');
        }
        if (fs.existsSync(LOCK_FILE)) {
            fs.unlinkSync(LOCK_FILE);
            console.log('üßπ Removed lock file');
        }
    } catch (error) {
        console.warn('‚ö†Ô∏è  Error during cleanup:', error.message);
    }
}

// ‰∏ªÂáΩÊï∞
function main() {
    console.log('üõë Xtream Codes Proxy Stopper');
    
    // Ê£ÄÊü•PIDÊñá‰ª∂
    if (!fs.existsSync(PID_FILE)) {
        console.log('‚ùå No PID file found. Server may not be running.');
        cleanup(); // Ê∏ÖÁêÜÂèØËÉΩÂ≠òÂú®ÁöÑÈîÅÊñá‰ª∂
        process.exit(1);
    }
    
    try {
        const pid = parseInt(fs.readFileSync(PID_FILE, 'utf8').trim());
        
        if (!isProcessRunning(pid)) {
            console.log(`‚ùå Process ${pid} is not running. Cleaning up...`);
            cleanup();
            process.exit(1);
        }
        
        console.log(`üìù Found server process with PID ${pid}`);
        console.log('üõë Sending SIGTERM signal...');
        
        // ÂèëÈÄÅSIGTERM‰ø°Âè∑
        process.kill(pid, 'SIGTERM');
        
        // Á≠âÂæÖËøõÁ®ãÈÄÄÂá∫
        const maxWaitTime = 10000; // 10Áßí
        const checkInterval = 500; // 500ms
        let waitTime = 0;
        
        const checkExit = setInterval(() => {
            waitTime += checkInterval;
            
            if (!isProcessRunning(pid)) {
                clearInterval(checkExit);
                console.log('‚úÖ Server stopped gracefully');
                cleanup();
                process.exit(0);
            }
            
            if (waitTime >= maxWaitTime) {
                clearInterval(checkExit);
                console.log('‚ö†Ô∏è  Server did not exit gracefully, sending SIGKILL...');
                
                try {
                    process.kill(pid, 'SIGKILL');
                    console.log('üíÄ Forcefully killed server process');
                } catch (error) {
                    console.log('‚ùå Failed to kill process:', error.message);
                }
                
                cleanup();
                process.exit(1);
            }
        }, checkInterval);
        
    } catch (error) {
        console.error('‚ùå Error reading PID file:', error.message);
        cleanup();
        process.exit(1);
    }
}

// ËøêË°å‰∏ªÂáΩÊï∞
main(); 